/*
 * Copyright (c) 2020 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "types.hpp"
#include "ITrustedUIApp.hpp"


/** @file  ITrustedUIApp.idl */

/**
 * @brief
 * TrustedUIApp interface provides methods to start a TrustedUI session in the trusted EE
 */

class TrustedUIAppImplBase : protected ImplBase, public ITrustedUIApp {
   public:
    TrustedUIAppImplBase() {}
    virtual ~TrustedUIAppImplBase() {}

    virtual int32_t invoke(ObjectOp op, ObjectArg* a, ObjectCounts k) {
        switch (ObjectOp_methodID(op)) {
            case OP_createSession: {
                if (k != ObjectCounts_pack(1, 0, 1, 0) ||
                    a[0].b.size != 8) {
                    break;
                }
                const struct s1 {
                    uint32_t m_displayId;
                    uint32_t m_inputMethod;
                }* i = (const struct s1*) a[0].b.ptr;
                return createSession(i->m_displayId, i->m_inputMethod, a[1].o);
            }
            case OP_startSession: {
                if (k != ObjectCounts_pack(1, 0, 0, 0) ||
                    a[0].b.size != 258) {
                    break;
                }
                const TUIConfig* TUIconf_ptr = (const TUIConfig*) a[0].b.ptr;
                return startSession(TUIconf_ptr);
            }
            case OP_stopSession: {
                return stopSession();
            }
            case OP_deleteSession: {
                return deleteSession();
            }
            case OP_handleCmd: {
                if (k != ObjectCounts_pack(1, 1, 0, 0)) {
                    break;
                }
                const void* cmd_ptr = (const void*) a[0].b.ptr;
                size_t cmd_len = a[0].b.size / 1;
                void* response_ptr = (void*) a[1].b.ptr;
                size_t response_len = a[1].b.size / 1;
                int32_t r = handleCmd(cmd_ptr, cmd_len, response_ptr, response_len, &response_len);
                a[1].b.size = response_len * 1;
                return r;
            }
            default: { return Object_ERROR_INVALID; }
        }
        return Object_ERROR_INVALID;
    }
};


/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.5 at Fri Jun  5 11:03:58 2020. */

#ifndef PB_QSH_LOCATION_PB_H_INCLUDED
#define PB_QSH_LOCATION_PB_H_INCLUDED
#include <pb.h>

#include "sns_std.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _qsh_location_msgid {
    QSH_LOCATION_MSGID_QSH_LOCATION_OPEN = 512,
    QSH_LOCATION_MSGID_QSH_LOCATION_CLOSE = 513,
    QSH_LOCATION_MSGID_QSH_LOCATION_UPDATE = 514,
    QSH_LOCATION_MSGID_QSH_LOCATION_ACK = 768,
    QSH_LOCATION_MSGID_QSH_LOCATION_POSITION_EVENT = 1024,
    QSH_LOCATION_MSGID_QSH_LOCATION_MEAS_AND_CLK_EVENT = 1025
} qsh_location_msgid;
#define _qsh_location_msgid_MIN QSH_LOCATION_MSGID_QSH_LOCATION_OPEN
#define _qsh_location_msgid_MAX QSH_LOCATION_MSGID_QSH_LOCATION_MEAS_AND_CLK_EVENT
#define _qsh_location_msgid_ARRAYSIZE ((qsh_location_msgid)(QSH_LOCATION_MSGID_QSH_LOCATION_MEAS_AND_CLK_EVENT+1))
#define qsh_location_msgid_QSH_LOCATION_MSGID_QSH_LOCATION_OPEN QSH_LOCATION_MSGID_QSH_LOCATION_OPEN
#define qsh_location_msgid_QSH_LOCATION_MSGID_QSH_LOCATION_CLOSE QSH_LOCATION_MSGID_QSH_LOCATION_CLOSE
#define qsh_location_msgid_QSH_LOCATION_MSGID_QSH_LOCATION_UPDATE QSH_LOCATION_MSGID_QSH_LOCATION_UPDATE
#define qsh_location_msgid_QSH_LOCATION_MSGID_QSH_LOCATION_ACK QSH_LOCATION_MSGID_QSH_LOCATION_ACK
#define qsh_location_msgid_QSH_LOCATION_MSGID_QSH_LOCATION_POSITION_EVENT QSH_LOCATION_MSGID_QSH_LOCATION_POSITION_EVENT
#define qsh_location_msgid_QSH_LOCATION_MSGID_QSH_LOCATION_MEAS_AND_CLK_EVENT QSH_LOCATION_MSGID_QSH_LOCATION_MEAS_AND_CLK_EVENT

typedef enum _qsh_location_request {
    qsh_location_request_QSH_LOCATION_POSITION_REQUEST = 1,
    qsh_location_request_QSH_LOCATION_MEAS_AND_CLK_REQUEST = 2
} qsh_location_request;
#define _qsh_location_request_MIN qsh_location_request_QSH_LOCATION_POSITION_REQUEST
#define _qsh_location_request_MAX qsh_location_request_QSH_LOCATION_MEAS_AND_CLK_REQUEST
#define _qsh_location_request_ARRAYSIZE ((qsh_location_request)(qsh_location_request_QSH_LOCATION_MEAS_AND_CLK_REQUEST+1))

typedef enum _qsh_location_capabilities {
    qsh_location_capabilities_QSH_LOCATION_CAPABILITIES_POSITION = 1,
    qsh_location_capabilities_QSH_LOCATION_CAPABILITIES_MEAS_AND_CLK = 2
} qsh_location_capabilities;
#define _qsh_location_capabilities_MIN qsh_location_capabilities_QSH_LOCATION_CAPABILITIES_POSITION
#define _qsh_location_capabilities_MAX qsh_location_capabilities_QSH_LOCATION_CAPABILITIES_MEAS_AND_CLK
#define _qsh_location_capabilities_ARRAYSIZE ((qsh_location_capabilities)(qsh_location_capabilities_QSH_LOCATION_CAPABILITIES_MEAS_AND_CLK+1))

typedef enum _qsh_location_constellation_type {
    qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_UNKNOWN = 0,
    qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_GPS = 1,
    qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_SBAS = 2,
    qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_GLONASS = 3,
    qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_QZSS = 4,
    qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_BEIDOU = 5,
    qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_GALILEO = 6,
    qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_NAVIC = 7
} qsh_location_constellation_type;
#define _qsh_location_constellation_type_MIN qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_UNKNOWN
#define _qsh_location_constellation_type_MAX qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_NAVIC
#define _qsh_location_constellation_type_ARRAYSIZE ((qsh_location_constellation_type)(qsh_location_constellation_type_QSH_LOCATION_CONSTELLATION_TYPE_NAVIC+1))

typedef enum _qsh_location_measurement_state {
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_UNKNOWN = 0,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_CODE_LOCK = 1,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_BIT_SYNC = 2,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_SUBFRAME_SYNC = 4,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_TOW_DECODED = 8,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_MSEC_AMBIGUOUS = 16,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_SYMBOL_SYNC = 32,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_GLO_STRING_SYNC = 64,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_GLO_TOD_DECODED = 128,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_BDS_D2_BIT_SYNC = 256,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_BDS_D2_SUBFRAME_SYNC = 512,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_GAL_E1BC_CODE_LOCK = 1024,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_GAL_E1C_2ND_CODE_LOCK = 2048,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_GAL_E1B_PAGE_SYNC = 4096,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_SBAS_SYNC = 8192,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_TOW_KNOWN = 16384,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_GLO_TOD_KNOWN = 32768,
    qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_2ND_CODE_LOCK = 65536
} qsh_location_measurement_state;
#define _qsh_location_measurement_state_MIN qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_UNKNOWN
#define _qsh_location_measurement_state_MAX qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_2ND_CODE_LOCK
#define _qsh_location_measurement_state_ARRAYSIZE ((qsh_location_measurement_state)(qsh_location_measurement_state_QSH_LOCATION_MEASUREMENT_STATE_STATE_2ND_CODE_LOCK+1))

typedef enum _qsh_location_multipath_indicator {
    qsh_location_multipath_indicator_QSH_LOCATION_MULTIPATH_INDICATOR_UNKNOWN = 0,
    qsh_location_multipath_indicator_QSH_LOCATION_MULTIPATH_INDICATOR_PRESENT = 1,
    qsh_location_multipath_indicator_QSH_LOCATION_MULTIPATH_INDICATOR_NOT_PRESENT = 2
} qsh_location_multipath_indicator;
#define _qsh_location_multipath_indicator_MIN qsh_location_multipath_indicator_QSH_LOCATION_MULTIPATH_INDICATOR_UNKNOWN
#define _qsh_location_multipath_indicator_MAX qsh_location_multipath_indicator_QSH_LOCATION_MULTIPATH_INDICATOR_NOT_PRESENT
#define _qsh_location_multipath_indicator_ARRAYSIZE ((qsh_location_multipath_indicator)(qsh_location_multipath_indicator_QSH_LOCATION_MULTIPATH_INDICATOR_NOT_PRESENT+1))

/* Struct definitions */
typedef struct _qsh_location_ack {
    bool error;
    qsh_location_msgid command;
    bool has_version;
    uint32_t version;
    bool has_capabilities;
    uint32_t capabilities;
/* @@protoc_insertion_point(struct:qsh_location_ack) */
} qsh_location_ack;

typedef struct _qsh_location_clock {
    int64_t time;
    bool has_time_uncertainty;
    float time_uncertainty;
    bool has_full_bias;
    int64_t full_bias;
    bool has_bias;
    float bias;
    bool has_bias_uncertainty;
    float bias_uncertainty;
    bool has_drift;
    float drift;
    bool has_drift_uncertainty;
    float drift_uncertainty;
    bool has_hw_clock_discontinuity_count;
    uint32_t hw_clock_discontinuity_count;
/* @@protoc_insertion_point(struct:qsh_location_clock) */
} qsh_location_clock;

typedef struct _qsh_location_measurement {
    int32_t sv_id;
    qsh_location_constellation_type constellation_type;
    int64_t time_offset;
    uint32_t state;
    int64_t received_sv_time;
    int64_t received_sv_time_uncertainty;
    float c_n0;
    float pseudorange_rate;
    float pseudorange_rate_uncertainty;
    bool has_carrier_phase;
    double carrier_phase;
    bool has_carrier_phase_uncertainty;
    float carrier_phase_uncertainty;
    bool has_cycle_slip_count;
    uint32_t cycle_slip_count;
    bool has_multipath_indicator;
    qsh_location_multipath_indicator multipath_indicator;
    bool has_snr;
    float snr;
    bool has_carrier_frequency;
    float carrier_frequency;
/* @@protoc_insertion_point(struct:qsh_location_measurement) */
} qsh_location_measurement;

typedef struct _qsh_location_open {
    uint32_t version;
/* @@protoc_insertion_point(struct:qsh_location_open) */
} qsh_location_open;

typedef struct _qsh_location_position_event {
    uint64_t timestamp;
    bool has_latitude;
    int32_t latitude;
    bool has_longitude;
    int32_t longitude;
    bool has_altitude;
    float altitude;
    bool has_horizontal_accuracy;
    float horizontal_accuracy;
    bool has_vertical_accuracy;
    float vertical_accuracy;
    bool has_speed;
    float speed;
    bool has_speed_accuracy;
    float speed_accuracy;
    bool has_bearing;
    float bearing;
    bool has_bearing_accuracy;
    float bearing_accuracy;
    bool has_conformity_index;
    float conformity_index;
/* @@protoc_insertion_point(struct:qsh_location_position_event) */
} qsh_location_position_event;

typedef struct _qsh_location_update {
    bool start;
    qsh_location_request location_request;
    uint32_t interval;
/* @@protoc_insertion_point(struct:qsh_location_update) */
} qsh_location_update;

typedef struct _qsh_location_meas_and_clk_event {
    uint32_t number_of_measurements;
    pb_callback_t measurements;
    qsh_location_clock clock;
    uint32_t measurement_index;
/* @@protoc_insertion_point(struct:qsh_location_meas_and_clk_event) */
} qsh_location_meas_and_clk_event;

/* Default values for struct fields */

/* Initializer values for message structs */
#define qsh_location_open_init_default           {0}
#define qsh_location_update_init_default         {0, _qsh_location_request_MIN, 0}
#define qsh_location_ack_init_default            {0, _qsh_location_msgid_MIN, false, 0, false, 0}
#define qsh_location_position_event_init_default {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define qsh_location_measurement_init_default    {0, _qsh_location_constellation_type_MIN, 0, 0, 0, 0, 0, 0, 0, false, 0, false, 0, false, 0, false, _qsh_location_multipath_indicator_MIN, false, 0, false, 0}
#define qsh_location_clock_init_default          {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define qsh_location_meas_and_clk_event_init_default {0, {{NULL}, NULL}, qsh_location_clock_init_default, 0}
#define qsh_location_open_init_zero              {0}
#define qsh_location_update_init_zero            {0, _qsh_location_request_MIN, 0}
#define qsh_location_ack_init_zero               {0, _qsh_location_msgid_MIN, false, 0, false, 0}
#define qsh_location_position_event_init_zero    {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define qsh_location_measurement_init_zero       {0, _qsh_location_constellation_type_MIN, 0, 0, 0, 0, 0, 0, 0, false, 0, false, 0, false, 0, false, _qsh_location_multipath_indicator_MIN, false, 0, false, 0}
#define qsh_location_clock_init_zero             {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define qsh_location_meas_and_clk_event_init_zero {0, {{NULL}, NULL}, qsh_location_clock_init_zero, 0}

/* Field tags (for use in manual encoding/decoding) */
#define qsh_location_ack_error_tag               1
#define qsh_location_ack_command_tag             2
#define qsh_location_ack_version_tag             3
#define qsh_location_ack_capabilities_tag        4
#define qsh_location_clock_time_tag              1
#define qsh_location_clock_time_uncertainty_tag  2
#define qsh_location_clock_full_bias_tag         3
#define qsh_location_clock_bias_tag              4
#define qsh_location_clock_bias_uncertainty_tag  5
#define qsh_location_clock_drift_tag             6
#define qsh_location_clock_drift_uncertainty_tag 7
#define qsh_location_clock_hw_clock_discontinuity_count_tag 8
#define qsh_location_measurement_sv_id_tag       1
#define qsh_location_measurement_constellation_type_tag 2
#define qsh_location_measurement_time_offset_tag 3
#define qsh_location_measurement_state_tag       4
#define qsh_location_measurement_received_sv_time_tag 5
#define qsh_location_measurement_received_sv_time_uncertainty_tag 6
#define qsh_location_measurement_c_n0_tag        7
#define qsh_location_measurement_pseudorange_rate_tag 8
#define qsh_location_measurement_pseudorange_rate_uncertainty_tag 9
#define qsh_location_measurement_carrier_phase_tag 10
#define qsh_location_measurement_carrier_phase_uncertainty_tag 11
#define qsh_location_measurement_cycle_slip_count_tag 12
#define qsh_location_measurement_multipath_indicator_tag 13
#define qsh_location_measurement_snr_tag         14
#define qsh_location_measurement_carrier_frequency_tag 15
#define qsh_location_open_version_tag            1
#define qsh_location_position_event_timestamp_tag 1
#define qsh_location_position_event_latitude_tag 2
#define qsh_location_position_event_longitude_tag 3
#define qsh_location_position_event_altitude_tag 4
#define qsh_location_position_event_horizontal_accuracy_tag 5
#define qsh_location_position_event_vertical_accuracy_tag 6
#define qsh_location_position_event_speed_tag    7
#define qsh_location_position_event_speed_accuracy_tag 8
#define qsh_location_position_event_bearing_tag  9
#define qsh_location_position_event_bearing_accuracy_tag 10
#define qsh_location_position_event_conformity_index_tag 11
#define qsh_location_update_start_tag            1
#define qsh_location_update_location_request_tag 2
#define qsh_location_update_interval_tag         3
#define qsh_location_meas_and_clk_event_number_of_measurements_tag 1
#define qsh_location_meas_and_clk_event_measurements_tag 2
#define qsh_location_meas_and_clk_event_clock_tag 3
#define qsh_location_meas_and_clk_event_measurement_index_tag 4

/* Struct field encoding specification for nanopb */
extern const pb_field_t qsh_location_open_fields[2];
extern const pb_field_t qsh_location_update_fields[4];
extern const pb_field_t qsh_location_ack_fields[5];
extern const pb_field_t qsh_location_position_event_fields[12];
extern const pb_field_t qsh_location_measurement_fields[16];
extern const pb_field_t qsh_location_clock_fields[9];
extern const pb_field_t qsh_location_meas_and_clk_event_fields[5];

/* Maximum encoded size of messages (where known) */
#define qsh_location_open_size                   6
#define qsh_location_update_size                 10
#define qsh_location_ack_size                    17
#define qsh_location_position_event_size         73
#define qsh_location_measurement_size            99
#define qsh_location_clock_size                  53
/* qsh_location_meas_and_clk_event_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define QSH_LOCATION_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif

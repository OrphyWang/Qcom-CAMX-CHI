/******************************************************************************
#  Copyright (c) 2020 Qualcomm Technologies, Inc.
#  All Rights Reserved.
#  Confidential and Proprietary - Qualcomm Technologies, Inc.
#******************************************************************************/
#pragma once

#include <memory>
#include <android/hardware/radio/1.5/IRadio.h>
#include <android/hardware/radio/1.5/IRadioResponse.h>
#include <android/hardware/radio/1.5/IRadioIndication.h>
#include <android/hardware/radio/1.5/types.h>
#include <telephony/ril.h>
#include <ril_internal.h>
#include <ril_service.h>
#include <utils/SystemClock.h>
#include <inttypes.h>
#include <RadioContext.h>
#include <ril_service_1_4.h>
#include <telephony/ril.h>

#include "interfaces/nas/RilUnsolUiccAppsStatusChangedMessage.h"
#include "interfaces/NwRegistration/RilUnsolNwRegistrationRejectMessage.h"


// revisit the header files and using primitive
using namespace android::hardware::radio;
using namespace android::hardware::radio::V1_0;
//using namespace android::hardware::radio::deprecated::V1_0;
using ::android::hardware::Return;
using ::android::hardware::hidl_string;
using ::android::hardware::hidl_vec;
using ::android::hardware::hidl_array;
using ::android::hardware::hidl_bitfield;
using ::android::hardware::Void;
using android::CommandInfo;
using android::RequestInfo;
//using android::requestToString;
using android::sp;

class RadioImpl_1_5 : public RadioImpl_1_4, public V1_5::IRadio {
    sp<V1_5::IRadioResponse> mRadioResponseV1_5;
    sp<V1_5::IRadioIndication> mRadioIndicationV1_5;

protected:
    Return<void> setResponseFunctions_nolock(
        const ::android::sp<IRadioResponse>& radioResponseParam,
        const ::android::sp<IRadioIndication>& radioIndicationParam);
    RIL_SignalMeasureType convertHidlMeasureTypetoRilMeasureType(V1_5::SignalMeasurementType type);
    void fillInSignalStrengthCriteria(std::vector<SignalStrengthCriteriaEntry> &out,
            const V1_5::SignalThresholdInfo& signalThresholdInfo, V1_5::AccessNetwork ran);
    RadioError fillNetworkScanRequest_1_5(const V1_5::NetworkScanRequest& request,
        RIL_NetworkScanRequest &scanRequest);
    RIL_RadioAccessNetworks convertHidlAccessNetworkToRilAccessNetwork(V1_5::AccessNetwork ran);
    RIL_UIM_PersoSubstate convertHidlToRilPersoType(V1_5::PersoSubstate persoType);
    RIL_RadioAccessNetworks
        convertHidlRadioAccessNetworkToRilRadioAccessNetwork(V1_5::RadioAccessNetworks ran);

public:
    using RadioContext = RadioContextClass<RadioImpl_1_5>;

    RadioImpl_1_5(qcril_instance_id_e_type instance);

    virtual Module* getRilServiceModule() override;

    virtual void createRilServiceModule() override;

    virtual void clearCallbacks();

    Return<void> setResponseFunctions(
        const ::android::sp<IRadioResponse>& radioResponseParam,
        const ::android::sp<IRadioIndication>& radioIndicationParam);

    std::shared_ptr<RadioContext> getContext(int32_t serial);

    virtual ::android::status_t registerAsService(const std::string &serviceName);

    static const QcrildServiceVersion &getVersion();

    virtual const char *getDescriptor() {
        return V1_5::IRadio::descriptor;
    }

#ifdef HAS_QCRIL_DATA_1_5_RESPONSE_TYPES
    rildata::AccessNetwork_t convertHidlAccessNetworkToDataAccessNetwork(V1_5::AccessNetwork ran);
#endif
    rildata::DataProfileInfo_t convertHidlDataProfileInfoToRil(const V1_5::DataProfileInfo& dataProfileInfo);
    vector<V1_5::LinkAddress> convertLinkAddressToHidlVector(vector<rildata::LinkAddress_t> addresses);
    V1_5::SetupDataCallResult convertDcResultToHidlDcResult_1_5(const rildata::DataCallResult_t& result);

    // Forward these to RadioImpl_1_4
    // This is needed because the interface files generated by the hidl compiler do not use virtual inheritance.
    // So, we need to provide a concrete implementation for all virtual methods inherited.
    Return<void> setIndicationFilter_1_2(int32_t serial, ::android::hardware::hidl_bitfield<V1_2::IndicationFilter> indicationFilter) {
        return RadioImpl_1_4::setIndicationFilter_1_2(serial, indicationFilter);
    }

    Return<void> setSignalStrengthReportingCriteria(int32_t serial, int32_t hysteresisMs, int32_t hysteresisDb, const hidl_vec<int32_t>& thresholdsDbm, V1_2::AccessNetwork ran) {
        return RadioImpl_1_4::setSignalStrengthReportingCriteria(serial, hysteresisMs, hysteresisDb, thresholdsDbm, ran);
    }

    Return<void> setLinkCapacityReportingCriteria(int32_t serial, int32_t hysteresisMs, int32_t hysteresisDlKbps, int32_t hysteresisUlKbps, const hidl_vec<int32_t>& thresholdsDownlinkKbps, const hidl_vec<int32_t>& thresholdsUplinkKbps, V1_2::AccessNetwork ran) {
        return RadioImpl_1_4::setLinkCapacityReportingCriteria(serial, hysteresisMs, hysteresisDlKbps, hysteresisUlKbps, thresholdsDownlinkKbps, thresholdsUplinkKbps, ran);
    }

    Return<void> setupDataCall_1_2(int32_t serial, V1_2::AccessNetwork accessNetwork, const V1_0::DataProfileInfo& dataProfileInfo, bool modemCognitive, bool roamingAllowed, bool isRoaming, V1_2::DataRequestReason reason, const hidl_vec<hidl_string>& addresses, const hidl_vec<hidl_string>& dnses) {
        return RadioImpl_1_4::setupDataCall_1_2(serial, accessNetwork, dataProfileInfo, modemCognitive, roamingAllowed, isRoaming, reason, addresses, dnses);
    }

    Return<void> deactivateDataCall_1_2(int32_t serial, int32_t cid, V1_2::DataRequestReason reason) {
        return RadioImpl_1_4::deactivateDataCall_1_2(serial, cid, reason);
    }

    Return<void> startNetworkScan_1_2(int32_t serial, const ::android::hardware::radio::V1_2::NetworkScanRequest& request) {
        return RadioImpl_1_4::startNetworkScan_1_2(serial, request);
    }

    Return<void> startNetworkScan_1_4(int32_t serial, const ::android::hardware::radio::V1_2::NetworkScanRequest& request) {
        return RadioImpl_1_4::startNetworkScan_1_4(serial, request);
    }

    Return<void> getIccCardStatus(int32_t serial);

    Return<void> supplyIccPinForApp(int32_t serial, const ::android::hardware::hidl_string& pin, const ::android::hardware::hidl_string& aid) {
        return RadioImpl_1_4::supplyIccPinForApp(serial, pin, aid);
    }

    Return<void> supplyIccPukForApp(int32_t serial, const ::android::hardware::hidl_string& puk, const ::android::hardware::hidl_string& pin, const ::android::hardware::hidl_string& aid) {
        return RadioImpl_1_4::supplyIccPukForApp(serial, puk, pin, aid);
    }

    Return<void> supplyIccPin2ForApp(int32_t serial, const ::android::hardware::hidl_string& pin2, const ::android::hardware::hidl_string& aid) {
        return RadioImpl_1_4::supplyIccPin2ForApp(serial, pin2, aid);
    }

    Return<void> supplyIccPuk2ForApp(int32_t serial, const ::android::hardware::hidl_string& puk2, const ::android::hardware::hidl_string& pin2, const ::android::hardware::hidl_string& aid) {
        return RadioImpl_1_4::supplyIccPuk2ForApp(serial, puk2, pin2, aid);
    }

    Return<void> changeIccPinForApp(int32_t serial, const ::android::hardware::hidl_string& oldPin, const ::android::hardware::hidl_string& newPin, const ::android::hardware::hidl_string& aid) {
        return RadioImpl_1_4::changeIccPinForApp(serial, oldPin, newPin, aid);
    }

    Return<void> changeIccPin2ForApp(int32_t serial, const ::android::hardware::hidl_string& oldPin2, const ::android::hardware::hidl_string& newPin2, const ::android::hardware::hidl_string& aid) {
        return RadioImpl_1_4::changeIccPin2ForApp(serial, oldPin2, newPin2, aid);
    }

    Return<void> supplyNetworkDepersonalization(int32_t serial, const ::android::hardware::hidl_string& netPin) {
        return RadioImpl_1_4::supplyNetworkDepersonalization(serial, netPin);
    }

    Return<void> getCurrentCalls(int32_t serial) {
        return RadioImpl_1_4::getCurrentCalls(serial);
    }

    Return<void> dial(int32_t serial, const ::android::hardware::radio::V1_0::Dial& dialInfo) {
        return RadioImpl_1_4::dial(serial, dialInfo);
    }

    Return<void> getImsiForApp(int32_t serial, const ::android::hardware::hidl_string& aid) {
        return RadioImpl_1_4::getImsiForApp(serial, aid);
    }

    Return<void> hangup(int32_t serial, int32_t gsmIndex) {
        return RadioImpl_1_4::hangup(serial, gsmIndex);
    }

    Return<void> hangupWaitingOrBackground(int32_t serial) {
        return RadioImpl_1_4::hangupWaitingOrBackground(serial);
    }

    Return<void> hangupForegroundResumeBackground(int32_t serial) {
        return RadioImpl_1_4::hangupForegroundResumeBackground(serial);
    }

    Return<void> switchWaitingOrHoldingAndActive(int32_t serial) {
        return RadioImpl_1_4::switchWaitingOrHoldingAndActive(serial);
    }

    Return<void> conference(int32_t serial) {
        return RadioImpl_1_4::conference(serial);
    }

    Return<void> rejectCall(int32_t serial) {
        return RadioImpl_1_4::rejectCall(serial);
    }

    Return<void> getLastCallFailCause(int32_t serial) {
        return RadioImpl_1_4::getLastCallFailCause(serial);
    }

    Return<void> getSignalStrength(int32_t serial) {
        return RadioImpl_1_4::getSignalStrength(serial);
    }

    Return<void> getSignalStrength_1_4(int32_t serial) {
        return RadioImpl_1_4::getSignalStrength_1_4(serial);
    }

    Return<void> getVoiceRegistrationState(int32_t serial) {
        return RadioImpl_1_4::getVoiceRegistrationState(serial);
    }

    Return<void> getDataRegistrationState(int32_t serial) {
        return RadioImpl_1_4::getDataRegistrationState(serial);
    }

    Return<void> getOperator(int32_t serial) {
        return RadioImpl_1_4::getOperator(serial);
    }

    Return<void> setRadioPower(int32_t serial, bool on) {
        return RadioImpl_1_4::setRadioPower(serial, on);
    }

    Return<void> sendDtmf(int32_t serial, const ::android::hardware::hidl_string& s) {
        return RadioImpl_1_4::sendDtmf(serial, s);
    }

    Return<void> sendSms(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message) {
        return RadioImpl_1_4::sendSms(serial, message);
    }

    Return<void> sendSMSExpectMore(int32_t serial, const ::android::hardware::radio::V1_0::GsmSmsMessage& message) {
        return RadioImpl_1_4::sendSMSExpectMore(serial, message);
    }

    Return<void> setupDataCall(int32_t serial, ::android::hardware::radio::V1_0::RadioTechnology radioTechnology, const ::android::hardware::radio::V1_0::DataProfileInfo& dataProfileInfo, bool modemCognitive, bool roamingAllowed, bool isRoaming) {
        return RadioImpl_1_4::setupDataCall(serial, radioTechnology, dataProfileInfo, modemCognitive, roamingAllowed, isRoaming);
    }

    Return<void> iccIOForApp(int32_t serial, const ::android::hardware::radio::V1_0::IccIo& iccIo) {
        return RadioImpl_1_4::iccIOForApp(serial, iccIo);
    }

    Return<void> sendUssd(int32_t serial, const ::android::hardware::hidl_string& ussd) {
        return RadioImpl_1_4::sendUssd(serial, ussd);
    }

    Return<void> cancelPendingUssd(int32_t serial) {
        return RadioImpl_1_4::cancelPendingUssd(serial);
    }

    Return<void> getClir(int32_t serial) {
        return RadioImpl_1_4::getClir(serial);
    }

    Return<void> setClir(int32_t serial, int32_t status) {
        return RadioImpl_1_4::setClir(serial, status);
    }

    Return<void> getCallForwardStatus(int32_t serial, const ::android::hardware::radio::V1_0::CallForwardInfo& callInfo) {
        return RadioImpl_1_4::getCallForwardStatus(serial, callInfo);
    }

    Return<void> setCallForward(int32_t serial, const ::android::hardware::radio::V1_0::CallForwardInfo& callInfo) {
        return RadioImpl_1_4::setCallForward(serial, callInfo);
    }

    Return<void> getCallWaiting(int32_t serial, int32_t serviceClass) {
        return RadioImpl_1_4::getCallWaiting(serial, serviceClass);
    }

    Return<void> setCallWaiting(int32_t serial, bool enable, int32_t serviceClass) {
        return RadioImpl_1_4::setCallWaiting(serial, enable, serviceClass);
    }

    Return<void> acknowledgeLastIncomingGsmSms(int32_t serial, bool success, ::android::hardware::radio::V1_0::SmsAcknowledgeFailCause cause) {
        return RadioImpl_1_4::acknowledgeLastIncomingGsmSms(serial, success, cause);
    }

    Return<void> acceptCall(int32_t serial) {
        return RadioImpl_1_4::acceptCall(serial);
    }

    Return<void> deactivateDataCall(int32_t serial, int32_t cid, bool reasonRadioShutDown) {
        return RadioImpl_1_4::deactivateDataCall(serial, cid, reasonRadioShutDown);
    }

    Return<void> getFacilityLockForApp(int32_t serial, const ::android::hardware::hidl_string& facility, const ::android::hardware::hidl_string& password, int32_t serviceClass, const ::android::hardware::hidl_string& appId) {
        return RadioImpl_1_4::getFacilityLockForApp(serial, facility, password, serviceClass, appId);
    }

    Return<void> setFacilityLockForApp(int32_t serial, const ::android::hardware::hidl_string& facility, bool lockState, const ::android::hardware::hidl_string& password, int32_t serviceClass, const ::android::hardware::hidl_string& appId) {
        return RadioImpl_1_4::setFacilityLockForApp(serial, facility, lockState, password, serviceClass, appId);
    }

    Return<void> setBarringPassword(int32_t serial, const ::android::hardware::hidl_string& facility, const ::android::hardware::hidl_string& oldPassword, const ::android::hardware::hidl_string& newPassword) {
        return RadioImpl_1_4::setBarringPassword(serial, facility, oldPassword, newPassword);
    }

    Return<void> getNetworkSelectionMode(int32_t serial) {
        return RadioImpl_1_4::getNetworkSelectionMode(serial);
    }

    Return<void> setNetworkSelectionModeAutomatic(int32_t serial) {
        return RadioImpl_1_4::setNetworkSelectionModeAutomatic(serial);
    }

    Return<void> setNetworkSelectionModeManual(int32_t serial, const ::android::hardware::hidl_string& operatorNumeric) {
        return RadioImpl_1_4::setNetworkSelectionModeManual(serial, operatorNumeric);
    }

    Return<void> getAvailableNetworks(int32_t serial) {
        return RadioImpl_1_4::getAvailableNetworks(serial);
    }

    Return<void> startDtmf(int32_t serial, const ::android::hardware::hidl_string& s) {
        return RadioImpl_1_4::startDtmf(serial, s);
    }

    Return<void> stopDtmf(int32_t serial) {
        return RadioImpl_1_4::stopDtmf(serial);
    }

    Return<void> getBasebandVersion(int32_t serial) {
        return RadioImpl_1_4::getBasebandVersion(serial);
    }

    Return<void> separateConnection(int32_t serial, int32_t gsmIndex) {
        return RadioImpl_1_4::separateConnection(serial, gsmIndex);
    }

    Return<void> setMute(int32_t serial, bool enable) {
        return RadioImpl_1_4::setMute(serial, enable);
    }

    Return<void> getMute(int32_t serial) {
        return RadioImpl_1_4::getMute(serial);
    }

    Return<void> getClip(int32_t serial) {
        return RadioImpl_1_4::getClip(serial);
    }

    Return<void> getDataCallList(int32_t serial);

    Return<void> setSuppServiceNotifications(int32_t serial, bool enable) {
        return RadioImpl_1_4::setSuppServiceNotifications(serial, enable);
    }

    Return<void> writeSmsToSim(int32_t serial, const ::android::hardware::radio::V1_0::SmsWriteArgs& smsWriteArgs) {
        return RadioImpl_1_4::writeSmsToSim(serial, smsWriteArgs);
    }

    Return<void> deleteSmsOnSim(int32_t serial, int32_t index) {
        return RadioImpl_1_4::deleteSmsOnSim(serial, index);
    }

    Return<void> setBandMode(int32_t serial, ::android::hardware::radio::V1_0::RadioBandMode mode) {
        return RadioImpl_1_4::setBandMode(serial, mode);
    }

    Return<void> getAvailableBandModes(int32_t serial) {
        return RadioImpl_1_4::getAvailableBandModes(serial);
    }

    Return<void> sendEnvelope(int32_t serial, const ::android::hardware::hidl_string& command) {
        return RadioImpl_1_4::sendEnvelope(serial, command);
    }

    Return<void> sendTerminalResponseToSim(int32_t serial, const ::android::hardware::hidl_string& commandResponse) {
        return RadioImpl_1_4::sendTerminalResponseToSim(serial, commandResponse);
    }

    Return<void> handleStkCallSetupRequestFromSim(int32_t serial, bool accept) {
        return RadioImpl_1_4::handleStkCallSetupRequestFromSim(serial, accept);
    }

    Return<void> explicitCallTransfer(int32_t serial) {
        return RadioImpl_1_4::explicitCallTransfer(serial);
    }

    Return<void> setPreferredNetworkType(int32_t serial, ::android::hardware::radio::V1_0::PreferredNetworkType nwType) {
        return RadioImpl_1_4::setPreferredNetworkType(serial, nwType);
    }

    Return<void> getPreferredNetworkType(int32_t serial) {
        return RadioImpl_1_4::getPreferredNetworkType(serial);
    }

    Return<void> getNeighboringCids(int32_t serial) {
        return RadioImpl_1_4::getNeighboringCids(serial);
    }

    Return<void> setLocationUpdates(int32_t serial, bool enable) {
        return RadioImpl_1_4::setLocationUpdates(serial, enable);
    }

    Return<void> setCdmaSubscriptionSource(int32_t serial, ::android::hardware::radio::V1_0::CdmaSubscriptionSource cdmaSub) {
        return RadioImpl_1_4::setCdmaSubscriptionSource(serial, cdmaSub);
    }

    Return<void> setCdmaRoamingPreference(int32_t serial, ::android::hardware::radio::V1_0::CdmaRoamingType type) {
        return RadioImpl_1_4::setCdmaRoamingPreference(serial, type);
    }

    Return<void> getCdmaRoamingPreference(int32_t serial) {
        return RadioImpl_1_4::getCdmaRoamingPreference(serial);
    }

    Return<void> setTTYMode(int32_t serial, ::android::hardware::radio::V1_0::TtyMode mode) {
        return RadioImpl_1_4::setTTYMode(serial, mode);
    }

    Return<void> getTTYMode(int32_t serial) {
        return RadioImpl_1_4::getTTYMode(serial);
    }

    Return<void> setPreferredVoicePrivacy(int32_t serial, bool enable) {
        return RadioImpl_1_4::setPreferredVoicePrivacy(serial, enable);
    }

    Return<void> getPreferredVoicePrivacy(int32_t serial) {
        return RadioImpl_1_4::getPreferredVoicePrivacy(serial);
    }

    Return<void> sendCDMAFeatureCode(int32_t serial, const ::android::hardware::hidl_string& featureCode) {
        return RadioImpl_1_4::sendCDMAFeatureCode(serial, featureCode);
    }

    Return<void> sendBurstDtmf(int32_t serial, const ::android::hardware::hidl_string& dtmf, int32_t on, int32_t off) {
        return RadioImpl_1_4::sendBurstDtmf(serial, dtmf, on, off);
    }

    Return<void> sendCdmaSms(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsMessage& sms) {
        return RadioImpl_1_4::sendCdmaSms(serial, sms);
    }

    Return<void> acknowledgeLastIncomingCdmaSms(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsAck& smsAck) {
        return RadioImpl_1_4::acknowledgeLastIncomingCdmaSms(serial, smsAck);
    }

    Return<void> getGsmBroadcastConfig(int32_t serial) {
        return RadioImpl_1_4::getGsmBroadcastConfig(serial);
    }

    Return<void> setGsmBroadcastConfig(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::GsmBroadcastSmsConfigInfo>& configInfo) {
        return RadioImpl_1_4::setGsmBroadcastConfig(serial, configInfo);
    }

    Return<void> setGsmBroadcastActivation(int32_t serial, bool activate) {
        return RadioImpl_1_4::setGsmBroadcastActivation(serial, activate);
    }

    Return<void> getCdmaBroadcastConfig(int32_t serial) {
        return RadioImpl_1_4::getCdmaBroadcastConfig(serial);
    }

    Return<void> setCdmaBroadcastConfig(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::CdmaBroadcastSmsConfigInfo>& configInfo) {
        return RadioImpl_1_4::setCdmaBroadcastConfig(serial, configInfo);
    }

    Return<void> setCdmaBroadcastActivation(int32_t serial, bool activate) {
        return RadioImpl_1_4::setCdmaBroadcastActivation(serial, activate);
    }

    Return<void> getCDMASubscription(int32_t serial) {
        return RadioImpl_1_4::getCDMASubscription(serial);
    }

    Return<void> writeSmsToRuim(int32_t serial, const ::android::hardware::radio::V1_0::CdmaSmsWriteArgs& cdmaSms) {
        return RadioImpl_1_4::writeSmsToRuim(serial, cdmaSms);
    }

    Return<void> deleteSmsOnRuim(int32_t serial, int32_t index) {
        return RadioImpl_1_4::deleteSmsOnRuim(serial, index);
    }

    Return<void> getDeviceIdentity(int32_t serial) {
        return RadioImpl_1_4::getDeviceIdentity(serial);
    }

    Return<void> exitEmergencyCallbackMode(int32_t serial) {
        return RadioImpl_1_4::exitEmergencyCallbackMode(serial);
    }

    Return<void> getSmscAddress(int32_t serial) {
        return RadioImpl_1_4::getSmscAddress(serial);
    }

    Return<void> setSmscAddress(int32_t serial, const ::android::hardware::hidl_string& smsc) {
        return RadioImpl_1_4::setSmscAddress(serial, smsc);
    }

    Return<void> reportSmsMemoryStatus(int32_t serial, bool available) {
        return RadioImpl_1_4::reportSmsMemoryStatus(serial, available);
    }

    Return<void> reportStkServiceIsRunning(int32_t serial) {
        return RadioImpl_1_4::reportStkServiceIsRunning(serial);
    }

    Return<void> getCdmaSubscriptionSource(int32_t serial) {
        return RadioImpl_1_4::getCdmaSubscriptionSource(serial);
    }

    Return<void> requestIsimAuthentication(int32_t serial, const ::android::hardware::hidl_string& challenge) {
        return RadioImpl_1_4::requestIsimAuthentication(serial, challenge);
    }

    Return<void> acknowledgeIncomingGsmSmsWithPdu(int32_t serial, bool success, const ::android::hardware::hidl_string& ackPdu) {
        return RadioImpl_1_4::acknowledgeIncomingGsmSmsWithPdu(serial, success, ackPdu);
    }

    Return<void> sendEnvelopeWithStatus(int32_t serial, const ::android::hardware::hidl_string& contents) {
        return RadioImpl_1_4::sendEnvelopeWithStatus(serial, contents);
    }

    Return<void> getVoiceRadioTechnology(int32_t serial) {
        return RadioImpl_1_4::getVoiceRadioTechnology(serial);
    }

    Return<void> getCellInfoList(int32_t serial) {
        return RadioImpl_1_4::getCellInfoList(serial);
    }

    Return<void> setCellInfoListRate(int32_t serial, int32_t rate) {
        return RadioImpl_1_4::setCellInfoListRate(serial, rate);
    }

    Return<void> setInitialAttachApn(int32_t serial, const ::android::hardware::radio::V1_0::DataProfileInfo& dataProfileInfo, bool modemCognitive, bool isRoaming) {
        return RadioImpl_1_4::setInitialAttachApn(serial, dataProfileInfo, modemCognitive, isRoaming);
    }

    Return<void> getImsRegistrationState(int32_t serial) {
        return RadioImpl_1_4::getImsRegistrationState(serial);
    }

    Return<void> sendImsSms(int32_t serial, const ::android::hardware::radio::V1_0::ImsSmsMessage& message) {
        return RadioImpl_1_4::sendImsSms(serial, message);
    }

    Return<void> iccTransmitApduBasicChannel(int32_t serial, const ::android::hardware::radio::V1_0::SimApdu& message) {
        return RadioImpl_1_4::iccTransmitApduBasicChannel(serial, message);
    }

    Return<void> iccOpenLogicalChannel(int32_t serial, const ::android::hardware::hidl_string& aid, int32_t p2) {
        return RadioImpl_1_4::iccOpenLogicalChannel(serial, aid, p2);
    }

    Return<void> iccCloseLogicalChannel(int32_t serial, int32_t channelId) {
        return RadioImpl_1_4::iccCloseLogicalChannel(serial, channelId);
    }

    Return<void> iccTransmitApduLogicalChannel(int32_t serial, const ::android::hardware::radio::V1_0::SimApdu& message) {
        return RadioImpl_1_4::iccTransmitApduLogicalChannel(serial, message);
    }

    Return<void> nvReadItem(int32_t serial, ::android::hardware::radio::V1_0::NvItem itemId) {
        return RadioImpl_1_4::nvReadItem(serial, itemId);
    }

    Return<void> nvWriteItem(int32_t serial, const ::android::hardware::radio::V1_0::NvWriteItem& item) {
        return RadioImpl_1_4::nvWriteItem(serial, item);
    }

    Return<void> nvWriteCdmaPrl(int32_t serial, const ::android::hardware::hidl_vec<uint8_t>& prl) {
        return RadioImpl_1_4::nvWriteCdmaPrl(serial, prl);
    }

    Return<void> nvResetConfig(int32_t serial, ::android::hardware::radio::V1_0::ResetNvType resetType) {
        return RadioImpl_1_4::nvResetConfig(serial, resetType);
    }

    Return<void> setUiccSubscription(int32_t serial, const ::android::hardware::radio::V1_0::SelectUiccSub& uiccSub) {
        return RadioImpl_1_4::setUiccSubscription(serial, uiccSub);
    }

    Return<void> setDataAllowed(int32_t serial, bool allow) {
        return RadioImpl_1_4::setDataAllowed(serial, allow);
    }

    Return<void> getHardwareConfig(int32_t serial) {
        return RadioImpl_1_4::getHardwareConfig(serial);
    }

    Return<void> requestIccSimAuthentication(int32_t serial, int32_t authContext, const ::android::hardware::hidl_string& authData, const ::android::hardware::hidl_string& aid) {
        return RadioImpl_1_4::requestIccSimAuthentication(serial, authContext, authData, aid);
    }

    Return<void> setDataProfile(int32_t serial, const ::android::hardware::hidl_vec<::android::hardware::radio::V1_0::DataProfileInfo>& profiles, bool isRoaming) {
        return RadioImpl_1_4::setDataProfile(serial, profiles, isRoaming);
    }

    Return<void> requestShutdown(int32_t serial) {
        return RadioImpl_1_4::requestShutdown(serial);
    }

    Return<void> getRadioCapability(int32_t serial) {
        return RadioImpl_1_4::getRadioCapability(serial);
    }

    Return<void> setRadioCapability(int32_t serial, const ::android::hardware::radio::V1_0::RadioCapability& rc) {
        return RadioImpl_1_4::setRadioCapability(serial, rc);
    }

    Return<void> startLceService(int32_t serial, int32_t reportInterval, bool pullMode) {
        return RadioImpl_1_4::startLceService(serial, reportInterval, pullMode);
    }

    Return<void> stopLceService(int32_t serial) {
        return RadioImpl_1_4::stopLceService(serial);
    }

    Return<void> pullLceData(int32_t serial) {
        return RadioImpl_1_4::pullLceData(serial);
    }

    Return<void> getModemActivityInfo(int32_t serial) {
        return RadioImpl_1_4::getModemActivityInfo(serial);
    }

    Return<void> setAllowedCarriers(int32_t serial, bool allAllowed, const ::android::hardware::radio::V1_0::CarrierRestrictions& carriers) {
        return RadioImpl_1_4::setAllowedCarriers(serial, allAllowed, carriers);
    }

    Return<void> setAllowedCarriers_1_4(int32_t serial, const V1_4::CarrierRestrictionsWithPriority &carriers, V1_4::SimLockMultiSimPolicy multiSimPolicy) {
        return RadioImpl_1_4::setAllowedCarriers_1_4(serial, carriers, multiSimPolicy);
    }

    Return<void> getAllowedCarriers(int32_t serial) {
        return RadioImpl_1_4::getAllowedCarriers(serial);
    }

    Return<void> getAllowedCarriers_1_4(int32_t serial) {
        return RadioImpl_1_4::getAllowedCarriers_1_4(serial);
    }

    Return<void> sendDeviceState(int32_t serial, ::android::hardware::radio::V1_0::DeviceStateType deviceStateType, bool state) {
        return RadioImpl_1_4::sendDeviceState(serial, deviceStateType, state);
    }

    Return<void> setIndicationFilter(int32_t serial, ::android::hardware::hidl_bitfield<::android::hardware::radio::V1_0::IndicationFilter> indicationFilter) {
        return RadioImpl_1_4::setIndicationFilter(serial, indicationFilter);
    }

    Return<void> setSimCardPower(int32_t serial, bool powerUp) {
        return RadioImpl_1_4::setSimCardPower(serial, powerUp);
    }

    Return<void> responseAcknowledgement() {
        return RadioImpl_1_4::responseAcknowledgement();
    }

    Return<void> setCarrierInfoForImsiEncryption(int32_t serial, const ::android::hardware::radio::V1_1::ImsiEncryptionInfo& imsiEncryptionInfo) {
        return RadioImpl_1_4::setCarrierInfoForImsiEncryption(serial, imsiEncryptionInfo);
    }

    Return<void> setSimCardPower_1_1(int32_t serial, ::android::hardware::radio::V1_1::CardPowerState powerUp) {
        return RadioImpl_1_4::setSimCardPower_1_1(serial, powerUp);
    }

    Return<void> startNetworkScan(int32_t serial, const ::android::hardware::radio::V1_1::NetworkScanRequest& request) {
        return RadioImpl_1_4::startNetworkScan(serial, request);
    }

    Return<void> stopNetworkScan(int32_t serial) {
        return RadioImpl_1_4::stopNetworkScan(serial);
    }

    Return<void> startKeepalive(int32_t serial, const ::android::hardware::radio::V1_1::KeepaliveRequest& keepalive) {
        return RadioImpl_1_4::startKeepalive(serial, keepalive);
    }

    Return<void> stopKeepalive(int32_t serial, int32_t sessionHandle) {
        return RadioImpl_1_4::stopKeepalive(serial, sessionHandle);
    }

    Return<void> enableModem(int32_t serial, bool on) {
        return RadioImpl_1_4::enableModem(serial, on);
    }

    Return<void> setSystemSelectionChannels(int32_t serial, bool specifyChannels,
            const hidl_vec<V1_1::RadioAccessSpecifier>& specifiers) {
        return RadioImpl_1_4::setSystemSelectionChannels(serial, specifyChannels, specifiers);
    }

    Return<void> getModemStackStatus(int32_t serial) {
        return RadioImpl_1_4::getModemStackStatus(serial);
    }

    Return<void> setupDataCall_1_4(int32_t serial, V1_4::AccessNetwork accessNetwork, const V1_4::DataProfileInfo& dataProfileInfo,
            bool roamingAllowed, V1_2::DataRequestReason reason, const hidl_vec<hidl_string>& addresses, const hidl_vec<hidl_string>& dnses) {
        return RadioImpl_1_4::setupDataCall_1_4(serial, accessNetwork, dataProfileInfo,
                roamingAllowed, reason, addresses, dnses);
    }

    Return<void> setInitialAttachApn_1_4(int32_t serial, const V1_4::DataProfileInfo& dataProfileInfo) {
        return RadioImpl_1_4::setInitialAttachApn_1_4(serial, dataProfileInfo);
    }

    Return<void> setDataProfile_1_4(int32_t serial, const hidl_vec<V1_4::DataProfileInfo>& profiles) {
        return RadioImpl_1_4::setDataProfile_1_4(serial, profiles);
    }

    Return<void> emergencyDial(int32_t serial, const V1_0::Dial& dialInfo, hidl_bitfield<V1_4::EmergencyServiceCategory> categories,
            const hidl_vec<hidl_string>& urns, V1_4::EmergencyCallRouting routing, bool fromEmergencyDialer, bool isTesting) {
        return RadioImpl_1_4::emergencyDial(serial, dialInfo, categories, urns,
                routing, fromEmergencyDialer, isTesting);
    }

    Return<void> getPreferredNetworkTypeBitmap(int32_t serial) {
        return RadioImpl_1_4::getPreferredNetworkTypeBitmap(serial);
    }

    Return<void> setPreferredNetworkTypeBitmap(int32_t serial, hidl_bitfield<V1_4::RadioAccessFamily> networkTypeBitmap) {
        return RadioImpl_1_4::setPreferredNetworkTypeBitmap(serial, networkTypeBitmap);
    }

    Return<void> setSignalStrengthReportingCriteria_1_5(int32_t serial,
        const V1_5::SignalThresholdInfo& signalThresholdInfo, V1_5::AccessNetwork accessNetwork);
#if 0
    Return<void> getCurrentCalls_1_5(int32_t serial);
#endif

    Return<void> enableUiccApplications(int32_t serial, bool enable);

    Return<void> areUiccApplicationsEnabled(int32_t serial);

    Return<void> setSystemSelectionChannels_1_5(int32_t serial, bool specifyChannels, const hidl_vec<V1_5::RadioAccessSpecifier>& specifiers);

    virtual int sendUiccAppsStatusChanged(std::shared_ptr<RilUnsolUiccAppsStatusChangedMessage> msg);

    virtual int sendNetworkScanResult(std::shared_ptr<RilUnsolNetworkScanResultMessage> msg) override;

    Return<void> startNetworkScan_1_5(int32_t serial, const V1_5::NetworkScanRequest& request);

    Return<void> setupDataCall_1_5(int32_t serial, V1_5::AccessNetwork accessNetwork, const V1_5::DataProfileInfo& dataProfileInfo,
            bool roamingAllowed, V1_2::DataRequestReason reason, const hidl_vec<V1_5::LinkAddress>& addresses, const hidl_vec<hidl_string>& dnses);

    Return<void> setInitialAttachApn_1_5(int32_t serial, const V1_5::DataProfileInfo& dataProfileInfo);

    Return<void> setDataProfile_1_5(int32_t serial, const hidl_vec<V1_5::DataProfileInfo>& profiles);

    Return<void> setRadioPower_1_5(int32_t serial, bool powerOn, bool forEmergencyCall, bool preferredForEmergencyCall);

    Return<void> setIndicationFilter_1_5(int32_t serial, hidl_bitfield<V1_5::IndicationFilter> indicationFilter);

    Return<void> getBarringInfo(int32_t serial);

    Return<void> getVoiceRegistrationState_1_5(int32_t serial);

    Return<void> getDataRegistrationState_1_5(int32_t serial);

    Return<void> setNetworkSelectionModeManual_1_5(int32_t serial, const hidl_string& operatorNumeric, V1_5::RadioAccessNetworks ran);

    Return<void> sendCdmaSmsExpectMore(int32_t serial, const V1_0::CdmaSmsMessage& sms);

    Return<void> setLinkCapacityReportingCriteria_1_5(int32_t serial, int32_t hysteresisMs, int32_t hysteresisDlKbps,
            int32_t hysteresisUlKbps, const hidl_vec<int32_t>& thresholdsDownlinkKbps, const hidl_vec<int32_t>& thresholdsUplinkKbps,
            V1_5::AccessNetwork accessNetwork);

    virtual void setupDataCallResponse_1_5(RadioResponseInfo responseInfo, const V1_5::SetupDataCallResult& dcResult);

    virtual void dataCallListChanged_1_5(RadioIndicationType indType, const hidl_vec<V1_5::SetupDataCallResult>& dcResultList);

    virtual void setInitialAttachApnResponse_1_5(RadioResponseInfo responseInfo);

    virtual void setDataProfileResponse_1_5(RadioResponseInfo responseInfo);

    virtual void setLinkCapacityReportingCriteriaResponse_1_5(RadioResponseInfo responseInfo);

    virtual void getDataCallListResponse_1_5(std::shared_ptr<rildata::DataCallListResult_t> responseDataPtr, int32_t serial, Message::Callback::Status status);

    virtual int sendNwRegistrationReject(std::shared_ptr<RilUnsolNwRegistrationRejectMessage> msg);

    Return<void> supplySimDepersonalization(int32_t serial, V1_5::PersoSubstate persoType,
                                       const ::android::hardware::hidl_string& controlKey);

    virtual void sendRadioClientCapabilities();

protected:
#if 0
    int convertToHidl(V1_5::Call &out, qcril::interfaces::CallInfo &in);
#endif

    void fillVoiceRegistrationStateResponse(V1_5::RegStateResult &out,
        const RIL_VoiceRegistrationStateResponse &in);
    void fillDataRegistrationStateResponse(V1_5::RegStateResult &out,
        const RIL_DataRegistrationStateResponse &in);

    virtual int sendCellInfoListInd(int slotId, int indicationType, int token, RIL_Errno e, void *response, size_t responseLen);

    virtual int sendGetCellInfoListResponse(int slotId, int responseType, int serial, RIL_Errno e, void *response, size_t responseLen);


private:
    RadioError sanityCheckSignalStrengthCriteriaParams(const V1_5::SignalThresholdInfo& threshold,
        V1_5::AccessNetwork ran);
    RadioError fillSetSystemSelectionChannelRequest_1_5(const hidl_vec<V1_5::RadioAccessSpecifier>& specifiers,
        RIL_SysSelChannels &request);
    RadioError sanityCheck(const hidl_vec<V1_5::RadioAccessSpecifier>& ras);
    RadioError convertHidlRasToRilRas(RIL_RadioAccessSpecifier& ras_to,
        const V1_5::RadioAccessSpecifier& ras_from);
    void convertGetIccCardStatusResponse(RadioResponseInfo &responseInfo,
        V1_5::CardStatus &cardStatus, int responseType,
        int serial, std::shared_ptr<RIL_UIM_CardStatus> p_cur);
};
